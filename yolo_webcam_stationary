import cv2
import time
import os
from datetime import datetime
from ultralytics import YOLO

# Load YOLO model
model = YOLO("yolov8n.pt")

# Initialize webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Could not open webcam.")
    exit()

# Create directory for detected images if not exists
output_dir = "detected_items"
os.makedirs(output_dir, exist_ok=True)

# Dictionary to store detected objects and their timestamps
detected_objects = {}
stationary_threshold = 20  # seconds
captured_objects = set()

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture image from webcam.")
        break

    # Perform object detection
    results = model(frame)

    for result in results:
        boxes = result.boxes  # Get detected bounding boxes
        for box in boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])  # Get bounding box coordinates
            conf = box.conf[0].item()  # Confidence score
            cls = int(box.cls[0].item())  # Class index
            label = model.names[cls]  # Get class name

            # Tracking new objects
            center_x, center_y = (x1 + x2) // 2, (y1 + y2) // 2
            if label in detected_objects:
                prev_center, first_detected = detected_objects[label]
                distance = ((center_x - prev_center[0]) ** 2 + (center_y - prev_center[1]) ** 2) ** 0.5

                if distance < 10:
                    elapsed_time = time.time() - first_detected
                    if elapsed_time > stationary_threshold and label not in captured_objects:
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        image_path = os.path.join(output_dir, f"stationary_{label}_{timestamp}.jpg")

                        # Draw bounding box before saving
                        color = (0, 0, 255)  # Red for new object
                        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
                        cv2.imwrite(image_path, frame)
                        print(f"Captured stationary {label} at {timestamp}, saved to {image_path}")
                        captured_objects.add(label)  # Ensure image is only taken once
            else:
                detected_objects[label] = ((center_x, center_y), time.time())

            # Draw bounding box for live detection
            color = (0, 255, 0)  # Default green
            if label not in captured_objects:  # Highlight new object in red
                color = (0, 0, 255)

            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

    # Display the frame
    cv2.imshow("YOLO Object Detection", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
